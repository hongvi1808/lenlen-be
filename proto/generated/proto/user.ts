// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v3.20.3
// source: proto/user.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "user";

export interface CreateUserDto {
  fullName: string;
  phoneNumber: string;
  email: string;
  birthDate: number;
  role: string;
}

export interface CreateUserResp {
  fullName: string;
  password: string;
  username: string;
}

export interface UserResp {
  id: string;
  fullName: string;
  phoneNumber: string;
  email: string;
  birthDate: number;
  role: string;
}

export interface FilterParam {
  id: string;
}

export const USER_PACKAGE_NAME = "user";

/** USER SERVICE */

export interface UserServiceClient {
  createUser(request: CreateUserDto): Observable<CreateUserResp>;

  getUserById(request: FilterParam): Observable<UserResp>;

  getUsers(request: FilterParam): Observable<UserResp>;
}

/** USER SERVICE */

export interface UserServiceController {
  createUser(request: CreateUserDto): Promise<CreateUserResp> | Observable<CreateUserResp> | CreateUserResp;

  getUserById(request: FilterParam): Promise<UserResp> | Observable<UserResp> | UserResp;

  getUsers(request: FilterParam): Promise<UserResp> | Observable<UserResp> | UserResp;
}

export function UserServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["createUser", "getUserById", "getUsers"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("UserService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("UserService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const USER_SERVICE_NAME = "UserService";
