// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v3.20.3
// source: proto/auth.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "authentication";

export interface LoginAuthDto {
  phoneNumber: string;
  password: string;
}

export interface RegisterAuthDto {
  phoneNumber: string;
  password: string;
  fullName: string;
  birthDate: number;
  email: string;
}

export interface SessionUserModel {
  sid: string;
  userId: string;
  sub: string;
  role: string;
  username: string;
}

export interface UserDataCallback {
  id: string;
  email: string;
  fullName: string;
}

export interface AuthResp {
  accessToken: string;
  refreshToken: string;
  expiredAt: number;
  userId: string;
}

export const AUTHENTICATION_PACKAGE_NAME = "authentication";

/** AUTH SERVICE */

export interface AuthServiceClient {
  logIn(request: LoginAuthDto): Observable<AuthResp>;

  register(request: RegisterAuthDto): Observable<AuthResp>;

  refreshToken(request: SessionUserModel): Observable<AuthResp>;

  googleCallback(request: UserDataCallback): Observable<AuthResp>;
}

/** AUTH SERVICE */

export interface AuthServiceController {
  logIn(request: LoginAuthDto): Promise<AuthResp> | Observable<AuthResp> | AuthResp;

  register(request: RegisterAuthDto): Promise<AuthResp> | Observable<AuthResp> | AuthResp;

  refreshToken(request: SessionUserModel): Promise<AuthResp> | Observable<AuthResp> | AuthResp;

  googleCallback(request: UserDataCallback): Promise<AuthResp> | Observable<AuthResp> | AuthResp;
}

export function AuthServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["logIn", "register", "refreshToken", "googleCallback"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("AuthService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("AuthService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const AUTH_SERVICE_NAME = "AuthService";
